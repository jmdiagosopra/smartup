{"version":3,"file":"chunk-3dad17c8.js","sources":["../node_modules/lit-html/lib/directive.js","../node_modules/lit-html/lib/dom.js","../node_modules/lit-html/lib/part.js","../node_modules/lit-html/lib/template.js","../node_modules/lit-html/lib/template-instance.js","../node_modules/lit-html/lib/template-result.js","../node_modules/lit-html/lib/parts.js","../node_modules/lit-html/lib/default-template-processor.js","../node_modules/lit-html/lib/template-factory.js","../node_modules/lit-html/lib/render.js","../node_modules/lit-html/lit-html.js","../node_modules/lit-html/lib/modify-template.js","../node_modules/lit-html/lib/shady-render.js","../node_modules/lit-element/lib/updating-element.js","../node_modules/lit-element/lib/css-tag.js","../node_modules/lit-element/lit-element.js","../node_modules/snarkdown/dist/snarkdown.es.js","../src/components/lit-i18n/lit-i18n.js","../src/components/lit-i18n/translate.js","../src/components/lit-i18n/index.js","../src/components/shared-styles.js"],"sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nconst directives = new WeakMap();\n/**\n * Brands a function as a directive factory function so that lit-html will call\n * the function during template rendering, rather than passing as a value.\n *\n * A _directive_ is a function that takes a Part as an argument. It has the\n * signature: `(part: Part) => void`.\n *\n * A directive _factory_ is a function that takes arguments for data and\n * configuration and returns a directive. Users of directive usually refer to\n * the directive factory as the directive. For example, \"The repeat directive\".\n *\n * Usually a template author will invoke a directive factory in their template\n * with relevant arguments, which will then return a directive function.\n *\n * Here's an example of using the `repeat()` directive factory that takes an\n * array and a function to render an item:\n *\n * ```js\n * html`<ul><${repeat(items, (item) => html`<li>${item}</li>`)}</ul>`\n * ```\n *\n * When `repeat` is invoked, it returns a directive function that closes over\n * `items` and the template function. When the outer template is rendered, the\n * return directive function is called with the Part for the expression.\n * `repeat` then performs it's custom logic to render multiple items.\n *\n * @param f The directive factory function. Must be a function that returns a\n * function of the signature `(part: Part) => void`. The returned function will\n * be called with the part object.\n *\n * @example\n *\n * import {directive, html} from 'lit-html';\n *\n * const immutable = directive((v) => (part) => {\n *   if (part.value !== v) {\n *     part.setValue(v)\n *   }\n * });\n */\nexport const directive = (f) => ((...args) => {\n    const d = f(...args);\n    directives.set(d, true);\n    return d;\n});\nexport const isDirective = (o) => {\n    return typeof o === 'function' && directives.has(o);\n};\n//# sourceMappingURL=directive.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * True if the custom elements polyfill is in use.\n */\nexport const isCEPolyfill = window.customElements !== undefined &&\n    window.customElements.polyfillWrapFlushCallback !==\n        undefined;\n/**\n * Reparents nodes, starting from `start` (inclusive) to `end` (exclusive),\n * into another container (could be the same container), before `before`. If\n * `before` is null, it appends the nodes to the container.\n */\nexport const reparentNodes = (container, start, end = null, before = null) => {\n    while (start !== end) {\n        const n = start.nextSibling;\n        container.insertBefore(start, before);\n        start = n;\n    }\n};\n/**\n * Removes nodes, starting from `start` (inclusive) to `end` (exclusive), from\n * `container`.\n */\nexport const removeNodes = (container, start, end = null) => {\n    while (start !== end) {\n        const n = start.nextSibling;\n        container.removeChild(start);\n        start = n;\n    }\n};\n//# sourceMappingURL=dom.js.map","/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * A sentinel value that signals that a value was handled by a directive and\n * should not be written to the DOM.\n */\nexport const noChange = {};\n/**\n * A sentinel value that signals a NodePart to fully clear its content.\n */\nexport const nothing = {};\n//# sourceMappingURL=part.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * An expression marker with embedded unique key to avoid collision with\n * possible text in templates.\n */\nexport const marker = `{{lit-${String(Math.random()).slice(2)}}}`;\n/**\n * An expression marker used text-positions, multi-binding attributes, and\n * attributes with markup-like text values.\n */\nexport const nodeMarker = `<!--${marker}-->`;\nexport const markerRegex = new RegExp(`${marker}|${nodeMarker}`);\n/**\n * Suffix appended to all bound attribute names.\n */\nexport const boundAttributeSuffix = '$lit$';\n/**\n * An updateable Template that tracks the location of dynamic parts.\n */\nexport class Template {\n    constructor(result, element) {\n        this.parts = [];\n        this.element = element;\n        const nodesToRemove = [];\n        const stack = [];\n        // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n        const walker = document.createTreeWalker(element.content, 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */, null, false);\n        // Keeps track of the last index associated with a part. We try to delete\n        // unnecessary nodes, but we never want to associate two different parts\n        // to the same index. They must have a constant node between.\n        let lastPartIndex = 0;\n        let index = -1;\n        let partIndex = 0;\n        const { strings, values: { length } } = result;\n        while (partIndex < length) {\n            const node = walker.nextNode();\n            if (node === null) {\n                // We've exhausted the content inside a nested template element.\n                // Because we still have parts (the outer for-loop), we know:\n                // - There is a template in the stack\n                // - The walker will find a nextNode outside the template\n                walker.currentNode = stack.pop();\n                continue;\n            }\n            index++;\n            if (node.nodeType === 1 /* Node.ELEMENT_NODE */) {\n                if (node.hasAttributes()) {\n                    const attributes = node.attributes;\n                    const { length } = attributes;\n                    // Per\n                    // https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap,\n                    // attributes are not guaranteed to be returned in document order.\n                    // In particular, Edge/IE can return them out of order, so we cannot\n                    // assume a correspondence between part index and attribute index.\n                    let count = 0;\n                    for (let i = 0; i < length; i++) {\n                        if (endsWith(attributes[i].name, boundAttributeSuffix)) {\n                            count++;\n                        }\n                    }\n                    while (count-- > 0) {\n                        // Get the template literal section leading up to the first\n                        // expression in this attribute\n                        const stringForPart = strings[partIndex];\n                        // Find the attribute name\n                        const name = lastAttributeNameRegex.exec(stringForPart)[2];\n                        // Find the corresponding attribute\n                        // All bound attributes have had a suffix added in\n                        // TemplateResult#getHTML to opt out of special attribute\n                        // handling. To look up the attribute value we also need to add\n                        // the suffix.\n                        const attributeLookupName = name.toLowerCase() + boundAttributeSuffix;\n                        const attributeValue = node.getAttribute(attributeLookupName);\n                        node.removeAttribute(attributeLookupName);\n                        const statics = attributeValue.split(markerRegex);\n                        this.parts.push({ type: 'attribute', index, name, strings: statics });\n                        partIndex += statics.length - 1;\n                    }\n                }\n                if (node.tagName === 'TEMPLATE') {\n                    stack.push(node);\n                    walker.currentNode = node.content;\n                }\n            }\n            else if (node.nodeType === 3 /* Node.TEXT_NODE */) {\n                const data = node.data;\n                if (data.indexOf(marker) >= 0) {\n                    const parent = node.parentNode;\n                    const strings = data.split(markerRegex);\n                    const lastIndex = strings.length - 1;\n                    // Generate a new text node for each literal section\n                    // These nodes are also used as the markers for node parts\n                    for (let i = 0; i < lastIndex; i++) {\n                        let insert;\n                        let s = strings[i];\n                        if (s === '') {\n                            insert = createMarker();\n                        }\n                        else {\n                            const match = lastAttributeNameRegex.exec(s);\n                            if (match !== null && endsWith(match[2], boundAttributeSuffix)) {\n                                s = s.slice(0, match.index) + match[1] +\n                                    match[2].slice(0, -boundAttributeSuffix.length) + match[3];\n                            }\n                            insert = document.createTextNode(s);\n                        }\n                        parent.insertBefore(insert, node);\n                        this.parts.push({ type: 'node', index: ++index });\n                    }\n                    // If there's no text, we must insert a comment to mark our place.\n                    // Else, we can trust it will stick around after cloning.\n                    if (strings[lastIndex] === '') {\n                        parent.insertBefore(createMarker(), node);\n                        nodesToRemove.push(node);\n                    }\n                    else {\n                        node.data = strings[lastIndex];\n                    }\n                    // We have a part for each match found\n                    partIndex += lastIndex;\n                }\n            }\n            else if (node.nodeType === 8 /* Node.COMMENT_NODE */) {\n                if (node.data === marker) {\n                    const parent = node.parentNode;\n                    // Add a new marker node to be the startNode of the Part if any of\n                    // the following are true:\n                    //  * We don't have a previousSibling\n                    //  * The previousSibling is already the start of a previous part\n                    if (node.previousSibling === null || index === lastPartIndex) {\n                        index++;\n                        parent.insertBefore(createMarker(), node);\n                    }\n                    lastPartIndex = index;\n                    this.parts.push({ type: 'node', index });\n                    // If we don't have a nextSibling, keep this node so we have an end.\n                    // Else, we can remove it to save future costs.\n                    if (node.nextSibling === null) {\n                        node.data = '';\n                    }\n                    else {\n                        nodesToRemove.push(node);\n                        index--;\n                    }\n                    partIndex++;\n                }\n                else {\n                    let i = -1;\n                    while ((i = node.data.indexOf(marker, i + 1)) !== -1) {\n                        // Comment node has a binding marker inside, make an inactive part\n                        // The binding won't work, but subsequent bindings will\n                        // TODO (justinfagnani): consider whether it's even worth it to\n                        // make bindings in comments work\n                        this.parts.push({ type: 'node', index: -1 });\n                        partIndex++;\n                    }\n                }\n            }\n        }\n        // Remove text binding nodes after the walk to not disturb the TreeWalker\n        for (const n of nodesToRemove) {\n            n.parentNode.removeChild(n);\n        }\n    }\n}\nconst endsWith = (str, suffix) => {\n    const index = str.length - suffix.length;\n    return index >= 0 && str.slice(index) === suffix;\n};\nexport const isTemplatePartActive = (part) => part.index !== -1;\n// Allows `document.createComment('')` to be renamed for a\n// small manual size-savings.\nexport const createMarker = () => document.createComment('');\n/**\n * This regex extracts the attribute name preceding an attribute-position\n * expression. It does this by matching the syntax allowed for attributes\n * against the string literal directly preceding the expression, assuming that\n * the expression is in an attribute-value position.\n *\n * See attributes in the HTML spec:\n * https://www.w3.org/TR/html5/syntax.html#elements-attributes\n *\n * \" \\x09\\x0a\\x0c\\x0d\" are HTML space characters:\n * https://www.w3.org/TR/html5/infrastructure.html#space-characters\n *\n * \"\\0-\\x1F\\x7F-\\x9F\" are Unicode control characters, which includes every\n * space character except \" \".\n *\n * So an attribute is:\n *  * The name: any character except a control character, space character, ('),\n *    (\"), \">\", \"=\", or \"/\"\n *  * Followed by zero or more space characters\n *  * Followed by \"=\"\n *  * Followed by zero or more space characters\n *  * Followed by:\n *    * Any character except space, ('), (\"), \"<\", \">\", \"=\", (`), or\n *    * (\") then any non-(\"), or\n *    * (') then any non-(')\n */\nexport const lastAttributeNameRegex = /([ \\x09\\x0a\\x0c\\x0d])([^\\0-\\x1F\\x7F-\\x9F \"'>=/]+)([ \\x09\\x0a\\x0c\\x0d]*=[ \\x09\\x0a\\x0c\\x0d]*(?:[^ \\x09\\x0a\\x0c\\x0d\"'`<>=]*|\"[^\"]*|'[^']*))$/;\n//# sourceMappingURL=template.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { isCEPolyfill } from './dom.js';\nimport { isTemplatePartActive } from './template.js';\n/**\n * An instance of a `Template` that can be attached to the DOM and updated\n * with new values.\n */\nexport class TemplateInstance {\n    constructor(template, processor, options) {\n        this.__parts = [];\n        this.template = template;\n        this.processor = processor;\n        this.options = options;\n    }\n    update(values) {\n        let i = 0;\n        for (const part of this.__parts) {\n            if (part !== undefined) {\n                part.setValue(values[i]);\n            }\n            i++;\n        }\n        for (const part of this.__parts) {\n            if (part !== undefined) {\n                part.commit();\n            }\n        }\n    }\n    _clone() {\n        // There are a number of steps in the lifecycle of a template instance's\n        // DOM fragment:\n        //  1. Clone - create the instance fragment\n        //  2. Adopt - adopt into the main document\n        //  3. Process - find part markers and create parts\n        //  4. Upgrade - upgrade custom elements\n        //  5. Update - set node, attribute, property, etc., values\n        //  6. Connect - connect to the document. Optional and outside of this\n        //     method.\n        //\n        // We have a few constraints on the ordering of these steps:\n        //  * We need to upgrade before updating, so that property values will pass\n        //    through any property setters.\n        //  * We would like to process before upgrading so that we're sure that the\n        //    cloned fragment is inert and not disturbed by self-modifying DOM.\n        //  * We want custom elements to upgrade even in disconnected fragments.\n        //\n        // Given these constraints, with full custom elements support we would\n        // prefer the order: Clone, Process, Adopt, Upgrade, Update, Connect\n        //\n        // But Safari dooes not implement CustomElementRegistry#upgrade, so we\n        // can not implement that order and still have upgrade-before-update and\n        // upgrade disconnected fragments. So we instead sacrifice the\n        // process-before-upgrade constraint, since in Custom Elements v1 elements\n        // must not modify their light DOM in the constructor. We still have issues\n        // when co-existing with CEv0 elements like Polymer 1, and with polyfills\n        // that don't strictly adhere to the no-modification rule because shadow\n        // DOM, which may be created in the constructor, is emulated by being placed\n        // in the light DOM.\n        //\n        // The resulting order is on native is: Clone, Adopt, Upgrade, Process,\n        // Update, Connect. document.importNode() performs Clone, Adopt, and Upgrade\n        // in one step.\n        //\n        // The Custom Elements v1 polyfill supports upgrade(), so the order when\n        // polyfilled is the more ideal: Clone, Process, Adopt, Upgrade, Update,\n        // Connect.\n        const fragment = isCEPolyfill ?\n            this.template.element.content.cloneNode(true) :\n            document.importNode(this.template.element.content, true);\n        const stack = [];\n        const parts = this.template.parts;\n        // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n        const walker = document.createTreeWalker(fragment, 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */, null, false);\n        let partIndex = 0;\n        let nodeIndex = 0;\n        let part;\n        let node = walker.nextNode();\n        // Loop through all the nodes and parts of a template\n        while (partIndex < parts.length) {\n            part = parts[partIndex];\n            if (!isTemplatePartActive(part)) {\n                this.__parts.push(undefined);\n                partIndex++;\n                continue;\n            }\n            // Progress the tree walker until we find our next part's node.\n            // Note that multiple parts may share the same node (attribute parts\n            // on a single element), so this loop may not run at all.\n            while (nodeIndex < part.index) {\n                nodeIndex++;\n                if (node.nodeName === 'TEMPLATE') {\n                    stack.push(node);\n                    walker.currentNode = node.content;\n                }\n                if ((node = walker.nextNode()) === null) {\n                    // We've exhausted the content inside a nested template element.\n                    // Because we still have parts (the outer for-loop), we know:\n                    // - There is a template in the stack\n                    // - The walker will find a nextNode outside the template\n                    walker.currentNode = stack.pop();\n                    node = walker.nextNode();\n                }\n            }\n            // We've arrived at our part's node.\n            if (part.type === 'node') {\n                const part = this.processor.handleTextExpression(this.options);\n                part.insertAfterNode(node.previousSibling);\n                this.__parts.push(part);\n            }\n            else {\n                this.__parts.push(...this.processor.handleAttributeExpressions(node, part.name, part.strings, this.options));\n            }\n            partIndex++;\n        }\n        if (isCEPolyfill) {\n            document.adoptNode(fragment);\n            customElements.upgrade(fragment);\n        }\n        return fragment;\n    }\n}\n//# sourceMappingURL=template-instance.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { reparentNodes } from './dom.js';\nimport { boundAttributeSuffix, lastAttributeNameRegex, marker, nodeMarker } from './template.js';\n/**\n * The return type of `html`, which holds a Template and the values from\n * interpolated expressions.\n */\nexport class TemplateResult {\n    constructor(strings, values, type, processor) {\n        this.strings = strings;\n        this.values = values;\n        this.type = type;\n        this.processor = processor;\n    }\n    /**\n     * Returns a string of HTML used to create a `<template>` element.\n     */\n    getHTML() {\n        const l = this.strings.length - 1;\n        let html = '';\n        let isCommentBinding = false;\n        for (let i = 0; i < l; i++) {\n            const s = this.strings[i];\n            // For each binding we want to determine the kind of marker to insert\n            // into the template source before it's parsed by the browser's HTML\n            // parser. The marker type is based on whether the expression is in an\n            // attribute, text, or comment poisition.\n            //   * For node-position bindings we insert a comment with the marker\n            //     sentinel as its text content, like <!--{{lit-guid}}-->.\n            //   * For attribute bindings we insert just the marker sentinel for the\n            //     first binding, so that we support unquoted attribute bindings.\n            //     Subsequent bindings can use a comment marker because multi-binding\n            //     attributes must be quoted.\n            //   * For comment bindings we insert just the marker sentinel so we don't\n            //     close the comment.\n            //\n            // The following code scans the template source, but is *not* an HTML\n            // parser. We don't need to track the tree structure of the HTML, only\n            // whether a binding is inside a comment, and if not, if it appears to be\n            // the first binding in an attribute.\n            const commentOpen = s.lastIndexOf('<!--');\n            // We're in comment position if we have a comment open with no following\n            // comment close. Because <-- can appear in an attribute value there can\n            // be false positives.\n            isCommentBinding = (commentOpen > -1 || isCommentBinding) &&\n                s.indexOf('-->', commentOpen + 1) === -1;\n            // Check to see if we have an attribute-like sequence preceeding the\n            // expression. This can match \"name=value\" like structures in text,\n            // comments, and attribute values, so there can be false-positives.\n            const attributeMatch = lastAttributeNameRegex.exec(s);\n            if (attributeMatch === null) {\n                // We're only in this branch if we don't have a attribute-like\n                // preceeding sequence. For comments, this guards against unusual\n                // attribute values like <div foo=\"<!--${'bar'}\">. Cases like\n                // <!-- foo=${'bar'}--> are handled correctly in the attribute branch\n                // below.\n                html += s + (isCommentBinding ? marker : nodeMarker);\n            }\n            else {\n                // For attributes we use just a marker sentinel, and also append a\n                // $lit$ suffix to the name to opt-out of attribute-specific parsing\n                // that IE and Edge do for style and certain SVG attributes.\n                html += s.substr(0, attributeMatch.index) + attributeMatch[1] +\n                    attributeMatch[2] + boundAttributeSuffix + attributeMatch[3] +\n                    marker;\n            }\n        }\n        html += this.strings[l];\n        return html;\n    }\n    getTemplateElement() {\n        const template = document.createElement('template');\n        template.innerHTML = this.getHTML();\n        return template;\n    }\n}\n/**\n * A TemplateResult for SVG fragments.\n *\n * This class wraps HTML in an `<svg>` tag in order to parse its contents in the\n * SVG namespace, then modifies the template to remove the `<svg>` tag so that\n * clones only container the original fragment.\n */\nexport class SVGTemplateResult extends TemplateResult {\n    getHTML() {\n        return `<svg>${super.getHTML()}</svg>`;\n    }\n    getTemplateElement() {\n        const template = super.getTemplateElement();\n        const content = template.content;\n        const svgElement = content.firstChild;\n        content.removeChild(svgElement);\n        reparentNodes(content, svgElement.firstChild);\n        return template;\n    }\n}\n//# sourceMappingURL=template-result.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { isDirective } from './directive.js';\nimport { removeNodes } from './dom.js';\nimport { noChange, nothing } from './part.js';\nimport { TemplateInstance } from './template-instance.js';\nimport { TemplateResult } from './template-result.js';\nimport { createMarker } from './template.js';\nexport const isPrimitive = (value) => {\n    return (value === null ||\n        !(typeof value === 'object' || typeof value === 'function'));\n};\nexport const isIterable = (value) => {\n    return Array.isArray(value) ||\n        // tslint:disable-next-line:no-any\n        !!(value && value[Symbol.iterator]);\n};\n/**\n * Writes attribute values to the DOM for a group of AttributeParts bound to a\n * single attibute. The value is only set once even if there are multiple parts\n * for an attribute.\n */\nexport class AttributeCommitter {\n    constructor(element, name, strings) {\n        this.dirty = true;\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n        this.parts = [];\n        for (let i = 0; i < strings.length - 1; i++) {\n            this.parts[i] = this._createPart();\n        }\n    }\n    /**\n     * Creates a single part. Override this to create a differnt type of part.\n     */\n    _createPart() {\n        return new AttributePart(this);\n    }\n    _getValue() {\n        const strings = this.strings;\n        const l = strings.length - 1;\n        let text = '';\n        for (let i = 0; i < l; i++) {\n            text += strings[i];\n            const part = this.parts[i];\n            if (part !== undefined) {\n                const v = part.value;\n                if (isPrimitive(v) || !isIterable(v)) {\n                    text += typeof v === 'string' ? v : String(v);\n                }\n                else {\n                    for (const t of v) {\n                        text += typeof t === 'string' ? t : String(t);\n                    }\n                }\n            }\n        }\n        text += strings[l];\n        return text;\n    }\n    commit() {\n        if (this.dirty) {\n            this.dirty = false;\n            this.element.setAttribute(this.name, this._getValue());\n        }\n    }\n}\n/**\n * A Part that controls all or part of an attribute value.\n */\nexport class AttributePart {\n    constructor(committer) {\n        this.value = undefined;\n        this.committer = committer;\n    }\n    setValue(value) {\n        if (value !== noChange && (!isPrimitive(value) || value !== this.value)) {\n            this.value = value;\n            // If the value is a not a directive, dirty the committer so that it'll\n            // call setAttribute. If the value is a directive, it'll dirty the\n            // committer if it calls setValue().\n            if (!isDirective(value)) {\n                this.committer.dirty = true;\n            }\n        }\n    }\n    commit() {\n        while (isDirective(this.value)) {\n            const directive = this.value;\n            this.value = noChange;\n            directive(this);\n        }\n        if (this.value === noChange) {\n            return;\n        }\n        this.committer.commit();\n    }\n}\n/**\n * A Part that controls a location within a Node tree. Like a Range, NodePart\n * has start and end locations and can set and update the Nodes between those\n * locations.\n *\n * NodeParts support several value types: primitives, Nodes, TemplateResults,\n * as well as arrays and iterables of those types.\n */\nexport class NodePart {\n    constructor(options) {\n        this.value = undefined;\n        this.__pendingValue = undefined;\n        this.options = options;\n    }\n    /**\n     * Appends this part into a container.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    appendInto(container) {\n        this.startNode = container.appendChild(createMarker());\n        this.endNode = container.appendChild(createMarker());\n    }\n    /**\n     * Inserts this part after the `ref` node (between `ref` and `ref`'s next\n     * sibling). Both `ref` and its next sibling must be static, unchanging nodes\n     * such as those that appear in a literal section of a template.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    insertAfterNode(ref) {\n        this.startNode = ref;\n        this.endNode = ref.nextSibling;\n    }\n    /**\n     * Appends this part into a parent part.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    appendIntoPart(part) {\n        part.__insert(this.startNode = createMarker());\n        part.__insert(this.endNode = createMarker());\n    }\n    /**\n     * Inserts this part after the `ref` part.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    insertAfterPart(ref) {\n        ref.__insert(this.startNode = createMarker());\n        this.endNode = ref.endNode;\n        ref.endNode = this.startNode;\n    }\n    setValue(value) {\n        this.__pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this.__pendingValue)) {\n            const directive = this.__pendingValue;\n            this.__pendingValue = noChange;\n            directive(this);\n        }\n        const value = this.__pendingValue;\n        if (value === noChange) {\n            return;\n        }\n        if (isPrimitive(value)) {\n            if (value !== this.value) {\n                this.__commitText(value);\n            }\n        }\n        else if (value instanceof TemplateResult) {\n            this.__commitTemplateResult(value);\n        }\n        else if (value instanceof Node) {\n            this.__commitNode(value);\n        }\n        else if (isIterable(value)) {\n            this.__commitIterable(value);\n        }\n        else if (value === nothing) {\n            this.value = nothing;\n            this.clear();\n        }\n        else {\n            // Fallback, will render the string representation\n            this.__commitText(value);\n        }\n    }\n    __insert(node) {\n        this.endNode.parentNode.insertBefore(node, this.endNode);\n    }\n    __commitNode(value) {\n        if (this.value === value) {\n            return;\n        }\n        this.clear();\n        this.__insert(value);\n        this.value = value;\n    }\n    __commitText(value) {\n        const node = this.startNode.nextSibling;\n        value = value == null ? '' : value;\n        if (node === this.endNode.previousSibling &&\n            node.nodeType === 3 /* Node.TEXT_NODE */) {\n            // If we only have a single text node between the markers, we can just\n            // set its value, rather than replacing it.\n            // TODO(justinfagnani): Can we just check if this.value is primitive?\n            node.data = value;\n        }\n        else {\n            this.__commitNode(document.createTextNode(typeof value === 'string' ? value : String(value)));\n        }\n        this.value = value;\n    }\n    __commitTemplateResult(value) {\n        const template = this.options.templateFactory(value);\n        if (this.value instanceof TemplateInstance &&\n            this.value.template === template) {\n            this.value.update(value.values);\n        }\n        else {\n            // Make sure we propagate the template processor from the TemplateResult\n            // so that we use its syntax extension, etc. The template factory comes\n            // from the render function options so that it can control template\n            // caching and preprocessing.\n            const instance = new TemplateInstance(template, value.processor, this.options);\n            const fragment = instance._clone();\n            instance.update(value.values);\n            this.__commitNode(fragment);\n            this.value = instance;\n        }\n    }\n    __commitIterable(value) {\n        // For an Iterable, we create a new InstancePart per item, then set its\n        // value to the item. This is a little bit of overhead for every item in\n        // an Iterable, but it lets us recurse easily and efficiently update Arrays\n        // of TemplateResults that will be commonly returned from expressions like:\n        // array.map((i) => html`${i}`), by reusing existing TemplateInstances.\n        // If _value is an array, then the previous render was of an\n        // iterable and _value will contain the NodeParts from the previous\n        // render. If _value is not an array, clear this part and make a new\n        // array for NodeParts.\n        if (!Array.isArray(this.value)) {\n            this.value = [];\n            this.clear();\n        }\n        // Lets us keep track of how many items we stamped so we can clear leftover\n        // items from a previous render\n        const itemParts = this.value;\n        let partIndex = 0;\n        let itemPart;\n        for (const item of value) {\n            // Try to reuse an existing part\n            itemPart = itemParts[partIndex];\n            // If no existing part, create a new one\n            if (itemPart === undefined) {\n                itemPart = new NodePart(this.options);\n                itemParts.push(itemPart);\n                if (partIndex === 0) {\n                    itemPart.appendIntoPart(this);\n                }\n                else {\n                    itemPart.insertAfterPart(itemParts[partIndex - 1]);\n                }\n            }\n            itemPart.setValue(item);\n            itemPart.commit();\n            partIndex++;\n        }\n        if (partIndex < itemParts.length) {\n            // Truncate the parts array so _value reflects the current state\n            itemParts.length = partIndex;\n            this.clear(itemPart && itemPart.endNode);\n        }\n    }\n    clear(startNode = this.startNode) {\n        removeNodes(this.startNode.parentNode, startNode.nextSibling, this.endNode);\n    }\n}\n/**\n * Implements a boolean attribute, roughly as defined in the HTML\n * specification.\n *\n * If the value is truthy, then the attribute is present with a value of\n * ''. If the value is falsey, the attribute is removed.\n */\nexport class BooleanAttributePart {\n    constructor(element, name, strings) {\n        this.value = undefined;\n        this.__pendingValue = undefined;\n        if (strings.length !== 2 || strings[0] !== '' || strings[1] !== '') {\n            throw new Error('Boolean attributes can only contain a single expression');\n        }\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n    }\n    setValue(value) {\n        this.__pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this.__pendingValue)) {\n            const directive = this.__pendingValue;\n            this.__pendingValue = noChange;\n            directive(this);\n        }\n        if (this.__pendingValue === noChange) {\n            return;\n        }\n        const value = !!this.__pendingValue;\n        if (this.value !== value) {\n            if (value) {\n                this.element.setAttribute(this.name, '');\n            }\n            else {\n                this.element.removeAttribute(this.name);\n            }\n            this.value = value;\n        }\n        this.__pendingValue = noChange;\n    }\n}\n/**\n * Sets attribute values for PropertyParts, so that the value is only set once\n * even if there are multiple parts for a property.\n *\n * If an expression controls the whole property value, then the value is simply\n * assigned to the property under control. If there are string literals or\n * multiple expressions, then the strings are expressions are interpolated into\n * a string first.\n */\nexport class PropertyCommitter extends AttributeCommitter {\n    constructor(element, name, strings) {\n        super(element, name, strings);\n        this.single =\n            (strings.length === 2 && strings[0] === '' && strings[1] === '');\n    }\n    _createPart() {\n        return new PropertyPart(this);\n    }\n    _getValue() {\n        if (this.single) {\n            return this.parts[0].value;\n        }\n        return super._getValue();\n    }\n    commit() {\n        if (this.dirty) {\n            this.dirty = false;\n            // tslint:disable-next-line:no-any\n            this.element[this.name] = this._getValue();\n        }\n    }\n}\nexport class PropertyPart extends AttributePart {\n}\n// Detect event listener options support. If the `capture` property is read\n// from the options object, then options are supported. If not, then the thrid\n// argument to add/removeEventListener is interpreted as the boolean capture\n// value so we should only pass the `capture` property.\nlet eventOptionsSupported = false;\ntry {\n    const options = {\n        get capture() {\n            eventOptionsSupported = true;\n            return false;\n        }\n    };\n    // tslint:disable-next-line:no-any\n    window.addEventListener('test', options, options);\n    // tslint:disable-next-line:no-any\n    window.removeEventListener('test', options, options);\n}\ncatch (_e) {\n}\nexport class EventPart {\n    constructor(element, eventName, eventContext) {\n        this.value = undefined;\n        this.__pendingValue = undefined;\n        this.element = element;\n        this.eventName = eventName;\n        this.eventContext = eventContext;\n        this.__boundHandleEvent = (e) => this.handleEvent(e);\n    }\n    setValue(value) {\n        this.__pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this.__pendingValue)) {\n            const directive = this.__pendingValue;\n            this.__pendingValue = noChange;\n            directive(this);\n        }\n        if (this.__pendingValue === noChange) {\n            return;\n        }\n        const newListener = this.__pendingValue;\n        const oldListener = this.value;\n        const shouldRemoveListener = newListener == null ||\n            oldListener != null &&\n                (newListener.capture !== oldListener.capture ||\n                    newListener.once !== oldListener.once ||\n                    newListener.passive !== oldListener.passive);\n        const shouldAddListener = newListener != null && (oldListener == null || shouldRemoveListener);\n        if (shouldRemoveListener) {\n            this.element.removeEventListener(this.eventName, this.__boundHandleEvent, this.__options);\n        }\n        if (shouldAddListener) {\n            this.__options = getOptions(newListener);\n            this.element.addEventListener(this.eventName, this.__boundHandleEvent, this.__options);\n        }\n        this.value = newListener;\n        this.__pendingValue = noChange;\n    }\n    handleEvent(event) {\n        if (typeof this.value === 'function') {\n            this.value.call(this.eventContext || this.element, event);\n        }\n        else {\n            this.value.handleEvent(event);\n        }\n    }\n}\n// We copy options because of the inconsistent behavior of browsers when reading\n// the third argument of add/removeEventListener. IE11 doesn't support options\n// at all. Chrome 41 only reads `capture` if the argument is an object.\nconst getOptions = (o) => o &&\n    (eventOptionsSupported ?\n        { capture: o.capture, passive: o.passive, once: o.once } :\n        o.capture);\n//# sourceMappingURL=parts.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { AttributeCommitter, BooleanAttributePart, EventPart, NodePart, PropertyCommitter } from './parts.js';\n/**\n * Creates Parts when a template is instantiated.\n */\nexport class DefaultTemplateProcessor {\n    /**\n     * Create parts for an attribute-position binding, given the event, attribute\n     * name, and string literals.\n     *\n     * @param element The element containing the binding\n     * @param name  The attribute name\n     * @param strings The string literals. There are always at least two strings,\n     *   event for fully-controlled bindings with a single expression.\n     */\n    handleAttributeExpressions(element, name, strings, options) {\n        const prefix = name[0];\n        if (prefix === '.') {\n            const committer = new PropertyCommitter(element, name.slice(1), strings);\n            return committer.parts;\n        }\n        if (prefix === '@') {\n            return [new EventPart(element, name.slice(1), options.eventContext)];\n        }\n        if (prefix === '?') {\n            return [new BooleanAttributePart(element, name.slice(1), strings)];\n        }\n        const committer = new AttributeCommitter(element, name, strings);\n        return committer.parts;\n    }\n    /**\n     * Create parts for a text-position binding.\n     * @param templateFactory\n     */\n    handleTextExpression(options) {\n        return new NodePart(options);\n    }\n}\nexport const defaultTemplateProcessor = new DefaultTemplateProcessor();\n//# sourceMappingURL=default-template-processor.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { marker, Template } from './template.js';\n/**\n * The default TemplateFactory which caches Templates keyed on\n * result.type and result.strings.\n */\nexport function templateFactory(result) {\n    let templateCache = templateCaches.get(result.type);\n    if (templateCache === undefined) {\n        templateCache = {\n            stringsArray: new WeakMap(),\n            keyString: new Map()\n        };\n        templateCaches.set(result.type, templateCache);\n    }\n    let template = templateCache.stringsArray.get(result.strings);\n    if (template !== undefined) {\n        return template;\n    }\n    // If the TemplateStringsArray is new, generate a key from the strings\n    // This key is shared between all templates with identical content\n    const key = result.strings.join(marker);\n    // Check if we already have a Template for this key\n    template = templateCache.keyString.get(key);\n    if (template === undefined) {\n        // If we have not seen this key before, create a new Template\n        template = new Template(result, result.getTemplateElement());\n        // Cache the Template for this key\n        templateCache.keyString.set(key, template);\n    }\n    // Cache all future queries for this TemplateStringsArray\n    templateCache.stringsArray.set(result.strings, template);\n    return template;\n}\nexport const templateCaches = new Map();\n//# sourceMappingURL=template-factory.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { removeNodes } from './dom.js';\nimport { NodePart } from './parts.js';\nimport { templateFactory } from './template-factory.js';\nexport const parts = new WeakMap();\n/**\n * Renders a template to a container.\n *\n * To update a container with new values, reevaluate the template literal and\n * call `render` with the new result.\n *\n * @param result a TemplateResult created by evaluating a template tag like\n *     `html` or `svg`.\n * @param container A DOM parent to render to. The entire contents are either\n *     replaced, or efficiently updated if the same result type was previous\n *     rendered there.\n * @param options RenderOptions for the entire render tree rendered to this\n *     container. Render options must *not* change between renders to the same\n *     container, as those changes will not effect previously rendered DOM.\n */\nexport const render = (result, container, options) => {\n    let part = parts.get(container);\n    if (part === undefined) {\n        removeNodes(container, container.firstChild);\n        parts.set(container, part = new NodePart(Object.assign({ templateFactory }, options)));\n        part.appendInto(container);\n    }\n    part.setValue(result);\n    part.commit();\n};\n//# sourceMappingURL=render.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n *\n * Main lit-html module.\n *\n * Main exports:\n *\n * -  [[html]]\n * -  [[svg]]\n * -  [[render]]\n *\n * @module lit-html\n * @preferred\n */\n/**\n * Do not remove this comment; it keeps typedoc from misplacing the module\n * docs.\n */\nimport { defaultTemplateProcessor } from './lib/default-template-processor.js';\nimport { SVGTemplateResult, TemplateResult } from './lib/template-result.js';\nexport { DefaultTemplateProcessor, defaultTemplateProcessor } from './lib/default-template-processor.js';\nexport { directive, isDirective } from './lib/directive.js';\n// TODO(justinfagnani): remove line when we get NodePart moving methods\nexport { removeNodes, reparentNodes } from './lib/dom.js';\nexport { noChange, nothing } from './lib/part.js';\nexport { AttributeCommitter, AttributePart, BooleanAttributePart, EventPart, isIterable, isPrimitive, NodePart, PropertyCommitter, PropertyPart } from './lib/parts.js';\nexport { parts, render } from './lib/render.js';\nexport { templateCaches, templateFactory } from './lib/template-factory.js';\nexport { TemplateInstance } from './lib/template-instance.js';\nexport { SVGTemplateResult, TemplateResult } from './lib/template-result.js';\nexport { createMarker, isTemplatePartActive, Template } from './lib/template.js';\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for lit-html usage.\n// TODO(justinfagnani): inject version number at build time\n(window['litHtmlVersions'] || (window['litHtmlVersions'] = [])).push('1.0.0');\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n */\nexport const html = (strings, ...values) => new TemplateResult(strings, values, 'html', defaultTemplateProcessor);\n/**\n * Interprets a template literal as an SVG template that can efficiently\n * render to and update a container.\n */\nexport const svg = (strings, ...values) => new SVGTemplateResult(strings, values, 'svg', defaultTemplateProcessor);\n//# sourceMappingURL=lit-html.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module shady-render\n */\nimport { isTemplatePartActive } from './template.js';\nconst walkerNodeFilter = 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */;\n/**\n * Removes the list of nodes from a Template safely. In addition to removing\n * nodes from the Template, the Template part indices are updated to match\n * the mutated Template DOM.\n *\n * As the template is walked the removal state is tracked and\n * part indices are adjusted as needed.\n *\n * div\n *   div#1 (remove) <-- start removing (removing node is div#1)\n *     div\n *       div#2 (remove)  <-- continue removing (removing node is still div#1)\n *         div\n * div <-- stop removing since previous sibling is the removing node (div#1,\n * removed 4 nodes)\n */\nexport function removeNodesFromTemplate(template, nodesToRemove) {\n    const { element: { content }, parts } = template;\n    const walker = document.createTreeWalker(content, walkerNodeFilter, null, false);\n    let partIndex = nextActiveIndexInTemplateParts(parts);\n    let part = parts[partIndex];\n    let nodeIndex = -1;\n    let removeCount = 0;\n    const nodesToRemoveInTemplate = [];\n    let currentRemovingNode = null;\n    while (walker.nextNode()) {\n        nodeIndex++;\n        const node = walker.currentNode;\n        // End removal if stepped past the removing node\n        if (node.previousSibling === currentRemovingNode) {\n            currentRemovingNode = null;\n        }\n        // A node to remove was found in the template\n        if (nodesToRemove.has(node)) {\n            nodesToRemoveInTemplate.push(node);\n            // Track node we're removing\n            if (currentRemovingNode === null) {\n                currentRemovingNode = node;\n            }\n        }\n        // When removing, increment count by which to adjust subsequent part indices\n        if (currentRemovingNode !== null) {\n            removeCount++;\n        }\n        while (part !== undefined && part.index === nodeIndex) {\n            // If part is in a removed node deactivate it by setting index to -1 or\n            // adjust the index as needed.\n            part.index = currentRemovingNode !== null ? -1 : part.index - removeCount;\n            // go to the next active part.\n            partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n            part = parts[partIndex];\n        }\n    }\n    nodesToRemoveInTemplate.forEach((n) => n.parentNode.removeChild(n));\n}\nconst countNodes = (node) => {\n    let count = (node.nodeType === 11 /* Node.DOCUMENT_FRAGMENT_NODE */) ? 0 : 1;\n    const walker = document.createTreeWalker(node, walkerNodeFilter, null, false);\n    while (walker.nextNode()) {\n        count++;\n    }\n    return count;\n};\nconst nextActiveIndexInTemplateParts = (parts, startIndex = -1) => {\n    for (let i = startIndex + 1; i < parts.length; i++) {\n        const part = parts[i];\n        if (isTemplatePartActive(part)) {\n            return i;\n        }\n    }\n    return -1;\n};\n/**\n * Inserts the given node into the Template, optionally before the given\n * refNode. In addition to inserting the node into the Template, the Template\n * part indices are updated to match the mutated Template DOM.\n */\nexport function insertNodeIntoTemplate(template, node, refNode = null) {\n    const { element: { content }, parts } = template;\n    // If there's no refNode, then put node at end of template.\n    // No part indices need to be shifted in this case.\n    if (refNode === null || refNode === undefined) {\n        content.appendChild(node);\n        return;\n    }\n    const walker = document.createTreeWalker(content, walkerNodeFilter, null, false);\n    let partIndex = nextActiveIndexInTemplateParts(parts);\n    let insertCount = 0;\n    let walkerIndex = -1;\n    while (walker.nextNode()) {\n        walkerIndex++;\n        const walkerNode = walker.currentNode;\n        if (walkerNode === refNode) {\n            insertCount = countNodes(node);\n            refNode.parentNode.insertBefore(node, refNode);\n        }\n        while (partIndex !== -1 && parts[partIndex].index === walkerIndex) {\n            // If we've inserted the node, simply adjust all subsequent parts\n            if (insertCount > 0) {\n                while (partIndex !== -1) {\n                    parts[partIndex].index += insertCount;\n                    partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n                }\n                return;\n            }\n            partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n        }\n    }\n}\n//# sourceMappingURL=modify-template.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * Module to add shady DOM/shady CSS polyfill support to lit-html template\n * rendering. See the [[render]] method for details.\n *\n * @module shady-render\n * @preferred\n */\n/**\n * Do not remove this comment; it keeps typedoc from misplacing the module\n * docs.\n */\nimport { removeNodes } from './dom.js';\nimport { insertNodeIntoTemplate, removeNodesFromTemplate } from './modify-template.js';\nimport { parts, render as litRender } from './render.js';\nimport { templateCaches } from './template-factory.js';\nimport { TemplateInstance } from './template-instance.js';\nimport { TemplateResult } from './template-result.js';\nimport { marker, Template } from './template.js';\nexport { html, svg, TemplateResult } from '../lit-html.js';\n// Get a key to lookup in `templateCaches`.\nconst getTemplateCacheKey = (type, scopeName) => `${type}--${scopeName}`;\nlet compatibleShadyCSSVersion = true;\nif (typeof window.ShadyCSS === 'undefined') {\n    compatibleShadyCSSVersion = false;\n}\nelse if (typeof window.ShadyCSS.prepareTemplateDom === 'undefined') {\n    console.warn(`Incompatible ShadyCSS version detected. ` +\n        `Please update to at least @webcomponents/webcomponentsjs@2.0.2 and ` +\n        `@webcomponents/shadycss@1.3.1.`);\n    compatibleShadyCSSVersion = false;\n}\n/**\n * Template factory which scopes template DOM using ShadyCSS.\n * @param scopeName {string}\n */\nconst shadyTemplateFactory = (scopeName) => (result) => {\n    const cacheKey = getTemplateCacheKey(result.type, scopeName);\n    let templateCache = templateCaches.get(cacheKey);\n    if (templateCache === undefined) {\n        templateCache = {\n            stringsArray: new WeakMap(),\n            keyString: new Map()\n        };\n        templateCaches.set(cacheKey, templateCache);\n    }\n    let template = templateCache.stringsArray.get(result.strings);\n    if (template !== undefined) {\n        return template;\n    }\n    const key = result.strings.join(marker);\n    template = templateCache.keyString.get(key);\n    if (template === undefined) {\n        const element = result.getTemplateElement();\n        if (compatibleShadyCSSVersion) {\n            window.ShadyCSS.prepareTemplateDom(element, scopeName);\n        }\n        template = new Template(result, element);\n        templateCache.keyString.set(key, template);\n    }\n    templateCache.stringsArray.set(result.strings, template);\n    return template;\n};\nconst TEMPLATE_TYPES = ['html', 'svg'];\n/**\n * Removes all style elements from Templates for the given scopeName.\n */\nconst removeStylesFromLitTemplates = (scopeName) => {\n    TEMPLATE_TYPES.forEach((type) => {\n        const templates = templateCaches.get(getTemplateCacheKey(type, scopeName));\n        if (templates !== undefined) {\n            templates.keyString.forEach((template) => {\n                const { element: { content } } = template;\n                // IE 11 doesn't support the iterable param Set constructor\n                const styles = new Set();\n                Array.from(content.querySelectorAll('style')).forEach((s) => {\n                    styles.add(s);\n                });\n                removeNodesFromTemplate(template, styles);\n            });\n        }\n    });\n};\nconst shadyRenderSet = new Set();\n/**\n * For the given scope name, ensures that ShadyCSS style scoping is performed.\n * This is done just once per scope name so the fragment and template cannot\n * be modified.\n * (1) extracts styles from the rendered fragment and hands them to ShadyCSS\n * to be scoped and appended to the document\n * (2) removes style elements from all lit-html Templates for this scope name.\n *\n * Note, <style> elements can only be placed into templates for the\n * initial rendering of the scope. If <style> elements are included in templates\n * dynamically rendered to the scope (after the first scope render), they will\n * not be scoped and the <style> will be left in the template and rendered\n * output.\n */\nconst prepareTemplateStyles = (renderedDOM, template, scopeName) => {\n    shadyRenderSet.add(scopeName);\n    // Move styles out of rendered DOM and store.\n    const styles = renderedDOM.querySelectorAll('style');\n    const { length } = styles;\n    // If there are no styles, skip unnecessary work\n    if (length === 0) {\n        // Ensure prepareTemplateStyles is called to support adding\n        // styles via `prepareAdoptedCssText` since that requires that\n        // `prepareTemplateStyles` is called.\n        window.ShadyCSS.prepareTemplateStyles(template.element, scopeName);\n        return;\n    }\n    const condensedStyle = document.createElement('style');\n    // Collect styles into a single style. This helps us make sure ShadyCSS\n    // manipulations will not prevent us from being able to fix up template\n    // part indices.\n    // NOTE: collecting styles is inefficient for browsers but ShadyCSS\n    // currently does this anyway. When it does not, this should be changed.\n    for (let i = 0; i < length; i++) {\n        const style = styles[i];\n        style.parentNode.removeChild(style);\n        condensedStyle.textContent += style.textContent;\n    }\n    // Remove styles from nested templates in this scope.\n    removeStylesFromLitTemplates(scopeName);\n    // And then put the condensed style into the \"root\" template passed in as\n    // `template`.\n    const content = template.element.content;\n    insertNodeIntoTemplate(template, condensedStyle, content.firstChild);\n    // Note, it's important that ShadyCSS gets the template that `lit-html`\n    // will actually render so that it can update the style inside when\n    // needed (e.g. @apply native Shadow DOM case).\n    window.ShadyCSS.prepareTemplateStyles(template.element, scopeName);\n    const style = content.querySelector('style');\n    if (window.ShadyCSS.nativeShadow && style !== null) {\n        // When in native Shadow DOM, ensure the style created by ShadyCSS is\n        // included in initially rendered output (`renderedDOM`).\n        renderedDOM.insertBefore(style.cloneNode(true), renderedDOM.firstChild);\n    }\n    else {\n        // When no style is left in the template, parts will be broken as a\n        // result. To fix this, we put back the style node ShadyCSS removed\n        // and then tell lit to remove that node from the template.\n        // There can be no style in the template in 2 cases (1) when Shady DOM\n        // is in use, ShadyCSS removes all styles, (2) when native Shadow DOM\n        // is in use ShadyCSS removes the style if it contains no content.\n        // NOTE, ShadyCSS creates its own style so we can safely add/remove\n        // `condensedStyle` here.\n        content.insertBefore(condensedStyle, content.firstChild);\n        const removes = new Set();\n        removes.add(condensedStyle);\n        removeNodesFromTemplate(template, removes);\n    }\n};\n/**\n * Extension to the standard `render` method which supports rendering\n * to ShadowRoots when the ShadyDOM (https://github.com/webcomponents/shadydom)\n * and ShadyCSS (https://github.com/webcomponents/shadycss) polyfills are used\n * or when the webcomponentsjs\n * (https://github.com/webcomponents/webcomponentsjs) polyfill is used.\n *\n * Adds a `scopeName` option which is used to scope element DOM and stylesheets\n * when native ShadowDOM is unavailable. The `scopeName` will be added to\n * the class attribute of all rendered DOM. In addition, any style elements will\n * be automatically re-written with this `scopeName` selector and moved out\n * of the rendered DOM and into the document `<head>`.\n *\n * It is common to use this render method in conjunction with a custom element\n * which renders a shadowRoot. When this is done, typically the element's\n * `localName` should be used as the `scopeName`.\n *\n * In addition to DOM scoping, ShadyCSS also supports a basic shim for css\n * custom properties (needed only on older browsers like IE11) and a shim for\n * a deprecated feature called `@apply` that supports applying a set of css\n * custom properties to a given location.\n *\n * Usage considerations:\n *\n * * Part values in `<style>` elements are only applied the first time a given\n * `scopeName` renders. Subsequent changes to parts in style elements will have\n * no effect. Because of this, parts in style elements should only be used for\n * values that will never change, for example parts that set scope-wide theme\n * values or parts which render shared style elements.\n *\n * * Note, due to a limitation of the ShadyDOM polyfill, rendering in a\n * custom element's `constructor` is not supported. Instead rendering should\n * either done asynchronously, for example at microtask timing (for example\n * `Promise.resolve()`), or be deferred until the first time the element's\n * `connectedCallback` runs.\n *\n * Usage considerations when using shimmed custom properties or `@apply`:\n *\n * * Whenever any dynamic changes are made which affect\n * css custom properties, `ShadyCSS.styleElement(element)` must be called\n * to update the element. There are two cases when this is needed:\n * (1) the element is connected to a new parent, (2) a class is added to the\n * element that causes it to match different custom properties.\n * To address the first case when rendering a custom element, `styleElement`\n * should be called in the element's `connectedCallback`.\n *\n * * Shimmed custom properties may only be defined either for an entire\n * shadowRoot (for example, in a `:host` rule) or via a rule that directly\n * matches an element with a shadowRoot. In other words, instead of flowing from\n * parent to child as do native css custom properties, shimmed custom properties\n * flow only from shadowRoots to nested shadowRoots.\n *\n * * When using `@apply` mixing css shorthand property names with\n * non-shorthand names (for example `border` and `border-width`) is not\n * supported.\n */\nexport const render = (result, container, options) => {\n    const scopeName = options.scopeName;\n    const hasRendered = parts.has(container);\n    const needsScoping = compatibleShadyCSSVersion &&\n        container.nodeType === 11 /* Node.DOCUMENT_FRAGMENT_NODE */ &&\n        !!container.host && result instanceof TemplateResult;\n    // Handle first render to a scope specially...\n    const firstScopeRender = needsScoping && !shadyRenderSet.has(scopeName);\n    // On first scope render, render into a fragment; this cannot be a single\n    // fragment that is reused since nested renders can occur synchronously.\n    const renderContainer = firstScopeRender ? document.createDocumentFragment() : container;\n    litRender(result, renderContainer, Object.assign({ templateFactory: shadyTemplateFactory(scopeName) }, options));\n    // When performing first scope render,\n    // (1) We've rendered into a fragment so that there's a chance to\n    // `prepareTemplateStyles` before sub-elements hit the DOM\n    // (which might cause them to render based on a common pattern of\n    // rendering in a custom element's `connectedCallback`);\n    // (2) Scope the template with ShadyCSS one time only for this scope.\n    // (3) Render the fragment into the container and make sure the\n    // container knows its `part` is the one we just rendered. This ensures\n    // DOM will be re-used on subsequent renders.\n    if (firstScopeRender) {\n        const part = parts.get(renderContainer);\n        parts.delete(renderContainer);\n        if (part.value instanceof TemplateInstance) {\n            prepareTemplateStyles(renderContainer, part.value.template, scopeName);\n        }\n        removeNodes(container, container.firstChild);\n        container.appendChild(renderContainer);\n        parts.set(container, part);\n    }\n    // After elements have hit the DOM, update styling if this is the\n    // initial render to this container.\n    // This is needed whenever dynamic changes are made so it would be\n    // safest to do every render; however, this would regress performance\n    // so we leave it up to the user to call `ShadyCSSS.styleElement`\n    // for dynamic changes.\n    if (!hasRendered && needsScoping) {\n        window.ShadyCSS.styleElement(container.host);\n    }\n};\n//# sourceMappingURL=shady-render.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * When using Closure Compiler, JSCompiler_renameProperty(property, object) is\n * replaced at compile time by the munged name for object[property]. We cannot\n * alias this function, so we have to use a small shim that has the same\n * behavior when not compiling.\n */\nwindow.JSCompiler_renameProperty =\n    (prop, _obj) => prop;\nexport const defaultConverter = {\n    toAttribute(value, type) {\n        switch (type) {\n            case Boolean:\n                return value ? '' : null;\n            case Object:\n            case Array:\n                // if the value is `null` or `undefined` pass this through\n                // to allow removing/no change behavior.\n                return value == null ? value : JSON.stringify(value);\n        }\n        return value;\n    },\n    fromAttribute(value, type) {\n        switch (type) {\n            case Boolean:\n                return value !== null;\n            case Number:\n                return value === null ? null : Number(value);\n            case Object:\n            case Array:\n                return JSON.parse(value);\n        }\n        return value;\n    }\n};\n/**\n * Change function that returns true if `value` is different from `oldValue`.\n * This method is used as the default for a property's `hasChanged` function.\n */\nexport const notEqual = (value, old) => {\n    // This ensures (old==NaN, value==NaN) always returns false\n    return old !== value && (old === old || value === value);\n};\nconst defaultPropertyDeclaration = {\n    attribute: true,\n    type: String,\n    converter: defaultConverter,\n    reflect: false,\n    hasChanged: notEqual\n};\nconst microtaskPromise = Promise.resolve(true);\nconst STATE_HAS_UPDATED = 1;\nconst STATE_UPDATE_REQUESTED = 1 << 2;\nconst STATE_IS_REFLECTING_TO_ATTRIBUTE = 1 << 3;\nconst STATE_IS_REFLECTING_TO_PROPERTY = 1 << 4;\nconst STATE_HAS_CONNECTED = 1 << 5;\n/**\n * Base element class which manages element properties and attributes. When\n * properties change, the `update` method is asynchronously called. This method\n * should be supplied by subclassers to render updates as desired.\n */\nexport class UpdatingElement extends HTMLElement {\n    constructor() {\n        super();\n        this._updateState = 0;\n        this._instanceProperties = undefined;\n        this._updatePromise = microtaskPromise;\n        this._hasConnectedResolver = undefined;\n        /**\n         * Map with keys for any properties that have changed since the last\n         * update cycle with previous values.\n         */\n        this._changedProperties = new Map();\n        /**\n         * Map with keys of properties that should be reflected when updated.\n         */\n        this._reflectingProperties = undefined;\n        this.initialize();\n    }\n    /**\n     * Returns a list of attributes corresponding to the registered properties.\n     * @nocollapse\n     */\n    static get observedAttributes() {\n        // note: piggy backing on this to ensure we're finalized.\n        this.finalize();\n        const attributes = [];\n        // Use forEach so this works even if for/of loops are compiled to for loops\n        // expecting arrays\n        this._classProperties.forEach((v, p) => {\n            const attr = this._attributeNameForProperty(p, v);\n            if (attr !== undefined) {\n                this._attributeToPropertyMap.set(attr, p);\n                attributes.push(attr);\n            }\n        });\n        return attributes;\n    }\n    /**\n     * Ensures the private `_classProperties` property metadata is created.\n     * In addition to `finalize` this is also called in `createProperty` to\n     * ensure the `@property` decorator can add property metadata.\n     */\n    /** @nocollapse */\n    static _ensureClassProperties() {\n        // ensure private storage for property declarations.\n        if (!this.hasOwnProperty(JSCompiler_renameProperty('_classProperties', this))) {\n            this._classProperties = new Map();\n            // NOTE: Workaround IE11 not supporting Map constructor argument.\n            const superProperties = Object.getPrototypeOf(this)._classProperties;\n            if (superProperties !== undefined) {\n                superProperties.forEach((v, k) => this._classProperties.set(k, v));\n            }\n        }\n    }\n    /**\n     * Creates a property accessor on the element prototype if one does not exist.\n     * The property setter calls the property's `hasChanged` property option\n     * or uses a strict identity check to determine whether or not to request\n     * an update.\n     * @nocollapse\n     */\n    static createProperty(name, options = defaultPropertyDeclaration) {\n        // Note, since this can be called by the `@property` decorator which\n        // is called before `finalize`, we ensure storage exists for property\n        // metadata.\n        this._ensureClassProperties();\n        this._classProperties.set(name, options);\n        // Do not generate an accessor if the prototype already has one, since\n        // it would be lost otherwise and that would never be the user's intention;\n        // Instead, we expect users to call `requestUpdate` themselves from\n        // user-defined accessors. Note that if the super has an accessor we will\n        // still overwrite it\n        if (options.noAccessor || this.prototype.hasOwnProperty(name)) {\n            return;\n        }\n        const key = typeof name === 'symbol' ? Symbol() : `__${name}`;\n        Object.defineProperty(this.prototype, name, {\n            // tslint:disable-next-line:no-any no symbol in index\n            get() {\n                return this[key];\n            },\n            set(value) {\n                const oldValue = this[name];\n                this[key] = value;\n                this._requestUpdate(name, oldValue);\n            },\n            configurable: true,\n            enumerable: true\n        });\n    }\n    /**\n     * Creates property accessors for registered properties and ensures\n     * any superclasses are also finalized.\n     * @nocollapse\n     */\n    static finalize() {\n        if (this.hasOwnProperty(JSCompiler_renameProperty('finalized', this)) &&\n            this.finalized) {\n            return;\n        }\n        // finalize any superclasses\n        const superCtor = Object.getPrototypeOf(this);\n        if (typeof superCtor.finalize === 'function') {\n            superCtor.finalize();\n        }\n        this.finalized = true;\n        this._ensureClassProperties();\n        // initialize Map populated in observedAttributes\n        this._attributeToPropertyMap = new Map();\n        // make any properties\n        // Note, only process \"own\" properties since this element will inherit\n        // any properties defined on the superClass, and finalization ensures\n        // the entire prototype chain is finalized.\n        if (this.hasOwnProperty(JSCompiler_renameProperty('properties', this))) {\n            const props = this.properties;\n            // support symbols in properties (IE11 does not support this)\n            const propKeys = [\n                ...Object.getOwnPropertyNames(props),\n                ...(typeof Object.getOwnPropertySymbols === 'function') ?\n                    Object.getOwnPropertySymbols(props) :\n                    []\n            ];\n            // This for/of is ok because propKeys is an array\n            for (const p of propKeys) {\n                // note, use of `any` is due to TypeSript lack of support for symbol in\n                // index types\n                // tslint:disable-next-line:no-any no symbol in index\n                this.createProperty(p, props[p]);\n            }\n        }\n    }\n    /**\n     * Returns the property name for the given attribute `name`.\n     * @nocollapse\n     */\n    static _attributeNameForProperty(name, options) {\n        const attribute = options.attribute;\n        return attribute === false ?\n            undefined :\n            (typeof attribute === 'string' ?\n                attribute :\n                (typeof name === 'string' ? name.toLowerCase() : undefined));\n    }\n    /**\n     * Returns true if a property should request an update.\n     * Called when a property value is set and uses the `hasChanged`\n     * option for the property if present or a strict identity check.\n     * @nocollapse\n     */\n    static _valueHasChanged(value, old, hasChanged = notEqual) {\n        return hasChanged(value, old);\n    }\n    /**\n     * Returns the property value for the given attribute value.\n     * Called via the `attributeChangedCallback` and uses the property's\n     * `converter` or `converter.fromAttribute` property option.\n     * @nocollapse\n     */\n    static _propertyValueFromAttribute(value, options) {\n        const type = options.type;\n        const converter = options.converter || defaultConverter;\n        const fromAttribute = (typeof converter === 'function' ? converter : converter.fromAttribute);\n        return fromAttribute ? fromAttribute(value, type) : value;\n    }\n    /**\n     * Returns the attribute value for the given property value. If this\n     * returns undefined, the property will *not* be reflected to an attribute.\n     * If this returns null, the attribute will be removed, otherwise the\n     * attribute will be set to the value.\n     * This uses the property's `reflect` and `type.toAttribute` property options.\n     * @nocollapse\n     */\n    static _propertyValueToAttribute(value, options) {\n        if (options.reflect === undefined) {\n            return;\n        }\n        const type = options.type;\n        const converter = options.converter;\n        const toAttribute = converter && converter.toAttribute ||\n            defaultConverter.toAttribute;\n        return toAttribute(value, type);\n    }\n    /**\n     * Performs element initialization. By default captures any pre-set values for\n     * registered properties.\n     */\n    initialize() {\n        this._saveInstanceProperties();\n        // ensures first update will be caught by an early access of\n        // `updateComplete`\n        this._requestUpdate();\n    }\n    /**\n     * Fixes any properties set on the instance before upgrade time.\n     * Otherwise these would shadow the accessor and break these properties.\n     * The properties are stored in a Map which is played back after the\n     * constructor runs. Note, on very old versions of Safari (<=9) or Chrome\n     * (<=41), properties created for native platform properties like (`id` or\n     * `name`) may not have default values set in the element constructor. On\n     * these browsers native properties appear on instances and therefore their\n     * default value will overwrite any element default (e.g. if the element sets\n     * this.id = 'id' in the constructor, the 'id' will become '' since this is\n     * the native platform default).\n     */\n    _saveInstanceProperties() {\n        // Use forEach so this works even if for/of loops are compiled to for loops\n        // expecting arrays\n        this.constructor\n            ._classProperties.forEach((_v, p) => {\n            if (this.hasOwnProperty(p)) {\n                const value = this[p];\n                delete this[p];\n                if (!this._instanceProperties) {\n                    this._instanceProperties = new Map();\n                }\n                this._instanceProperties.set(p, value);\n            }\n        });\n    }\n    /**\n     * Applies previously saved instance properties.\n     */\n    _applyInstanceProperties() {\n        // Use forEach so this works even if for/of loops are compiled to for loops\n        // expecting arrays\n        // tslint:disable-next-line:no-any\n        this._instanceProperties.forEach((v, p) => this[p] = v);\n        this._instanceProperties = undefined;\n    }\n    connectedCallback() {\n        this._updateState = this._updateState | STATE_HAS_CONNECTED;\n        // Ensure first connection completes an update. Updates cannot complete\n        // before connection and if one is pending connection the\n        // `_hasConnectionResolver` will exist. If so, resolve it to complete the\n        // update, otherwise requestUpdate.\n        if (this._hasConnectedResolver) {\n            this._hasConnectedResolver();\n            this._hasConnectedResolver = undefined;\n        }\n    }\n    /**\n     * Allows for `super.disconnectedCallback()` in extensions while\n     * reserving the possibility of making non-breaking feature additions\n     * when disconnecting at some point in the future.\n     */\n    disconnectedCallback() {\n    }\n    /**\n     * Synchronizes property values when attributes change.\n     */\n    attributeChangedCallback(name, old, value) {\n        if (old !== value) {\n            this._attributeToProperty(name, value);\n        }\n    }\n    _propertyToAttribute(name, value, options = defaultPropertyDeclaration) {\n        const ctor = this.constructor;\n        const attr = ctor._attributeNameForProperty(name, options);\n        if (attr !== undefined) {\n            const attrValue = ctor._propertyValueToAttribute(value, options);\n            // an undefined value does not change the attribute.\n            if (attrValue === undefined) {\n                return;\n            }\n            // Track if the property is being reflected to avoid\n            // setting the property again via `attributeChangedCallback`. Note:\n            // 1. this takes advantage of the fact that the callback is synchronous.\n            // 2. will behave incorrectly if multiple attributes are in the reaction\n            // stack at time of calling. However, since we process attributes\n            // in `update` this should not be possible (or an extreme corner case\n            // that we'd like to discover).\n            // mark state reflecting\n            this._updateState = this._updateState | STATE_IS_REFLECTING_TO_ATTRIBUTE;\n            if (attrValue == null) {\n                this.removeAttribute(attr);\n            }\n            else {\n                this.setAttribute(attr, attrValue);\n            }\n            // mark state not reflecting\n            this._updateState = this._updateState & ~STATE_IS_REFLECTING_TO_ATTRIBUTE;\n        }\n    }\n    _attributeToProperty(name, value) {\n        // Use tracking info to avoid deserializing attribute value if it was\n        // just set from a property setter.\n        if (this._updateState & STATE_IS_REFLECTING_TO_ATTRIBUTE) {\n            return;\n        }\n        const ctor = this.constructor;\n        const propName = ctor._attributeToPropertyMap.get(name);\n        if (propName !== undefined) {\n            const options = ctor._classProperties.get(propName) || defaultPropertyDeclaration;\n            // mark state reflecting\n            this._updateState = this._updateState | STATE_IS_REFLECTING_TO_PROPERTY;\n            this[propName] =\n                // tslint:disable-next-line:no-any\n                ctor._propertyValueFromAttribute(value, options);\n            // mark state not reflecting\n            this._updateState = this._updateState & ~STATE_IS_REFLECTING_TO_PROPERTY;\n        }\n    }\n    /**\n     * This private version of `requestUpdate` does not access or return the\n     * `updateComplete` promise. This promise can be overridden and is therefore\n     * not free to access.\n     */\n    _requestUpdate(name, oldValue) {\n        let shouldRequestUpdate = true;\n        // If we have a property key, perform property update steps.\n        if (name !== undefined) {\n            const ctor = this.constructor;\n            const options = ctor._classProperties.get(name) || defaultPropertyDeclaration;\n            if (ctor._valueHasChanged(this[name], oldValue, options.hasChanged)) {\n                if (!this._changedProperties.has(name)) {\n                    this._changedProperties.set(name, oldValue);\n                }\n                // Add to reflecting properties set.\n                // Note, it's important that every change has a chance to add the\n                // property to `_reflectingProperties`. This ensures setting\n                // attribute + property reflects correctly.\n                if (options.reflect === true &&\n                    !(this._updateState & STATE_IS_REFLECTING_TO_PROPERTY)) {\n                    if (this._reflectingProperties === undefined) {\n                        this._reflectingProperties = new Map();\n                    }\n                    this._reflectingProperties.set(name, options);\n                }\n            }\n            else {\n                // Abort the request if the property should not be considered changed.\n                shouldRequestUpdate = false;\n            }\n        }\n        if (!this._hasRequestedUpdate && shouldRequestUpdate) {\n            this._enqueueUpdate();\n        }\n    }\n    /**\n     * Requests an update which is processed asynchronously. This should\n     * be called when an element should update based on some state not triggered\n     * by setting a property. In this case, pass no arguments. It should also be\n     * called when manually implementing a property setter. In this case, pass the\n     * property `name` and `oldValue` to ensure that any configured property\n     * options are honored. Returns the `updateComplete` Promise which is resolved\n     * when the update completes.\n     *\n     * @param name {PropertyKey} (optional) name of requesting property\n     * @param oldValue {any} (optional) old value of requesting property\n     * @returns {Promise} A Promise that is resolved when the update completes.\n     */\n    requestUpdate(name, oldValue) {\n        this._requestUpdate(name, oldValue);\n        return this.updateComplete;\n    }\n    /**\n     * Sets up the element to asynchronously update.\n     */\n    async _enqueueUpdate() {\n        // Mark state updating...\n        this._updateState = this._updateState | STATE_UPDATE_REQUESTED;\n        let resolve;\n        let reject;\n        const previousUpdatePromise = this._updatePromise;\n        this._updatePromise = new Promise((res, rej) => {\n            resolve = res;\n            reject = rej;\n        });\n        try {\n            // Ensure any previous update has resolved before updating.\n            // This `await` also ensures that property changes are batched.\n            await previousUpdatePromise;\n        }\n        catch (e) {\n            // Ignore any previous errors. We only care that the previous cycle is\n            // done. Any error should have been handled in the previous update.\n        }\n        // Make sure the element has connected before updating.\n        if (!this._hasConnected) {\n            await new Promise((res) => this._hasConnectedResolver = res);\n        }\n        try {\n            const result = this.performUpdate();\n            // If `performUpdate` returns a Promise, we await it. This is done to\n            // enable coordinating updates with a scheduler. Note, the result is\n            // checked to avoid delaying an additional microtask unless we need to.\n            if (result != null) {\n                await result;\n            }\n        }\n        catch (e) {\n            reject(e);\n        }\n        resolve(!this._hasRequestedUpdate);\n    }\n    get _hasConnected() {\n        return (this._updateState & STATE_HAS_CONNECTED);\n    }\n    get _hasRequestedUpdate() {\n        return (this._updateState & STATE_UPDATE_REQUESTED);\n    }\n    get hasUpdated() {\n        return (this._updateState & STATE_HAS_UPDATED);\n    }\n    /**\n     * Performs an element update. Note, if an exception is thrown during the\n     * update, `firstUpdated` and `updated` will not be called.\n     *\n     * You can override this method to change the timing of updates. If this\n     * method is overridden, `super.performUpdate()` must be called.\n     *\n     * For instance, to schedule updates to occur just before the next frame:\n     *\n     * ```\n     * protected async performUpdate(): Promise<unknown> {\n     *   await new Promise((resolve) => requestAnimationFrame(() => resolve()));\n     *   super.performUpdate();\n     * }\n     * ```\n     */\n    performUpdate() {\n        // Mixin instance properties once, if they exist.\n        if (this._instanceProperties) {\n            this._applyInstanceProperties();\n        }\n        let shouldUpdate = false;\n        const changedProperties = this._changedProperties;\n        try {\n            shouldUpdate = this.shouldUpdate(changedProperties);\n            if (shouldUpdate) {\n                this.update(changedProperties);\n            }\n        }\n        catch (e) {\n            // Prevent `firstUpdated` and `updated` from running when there's an\n            // update exception.\n            shouldUpdate = false;\n            throw e;\n        }\n        finally {\n            // Ensure element can accept additional updates after an exception.\n            this._markUpdated();\n        }\n        if (shouldUpdate) {\n            if (!(this._updateState & STATE_HAS_UPDATED)) {\n                this._updateState = this._updateState | STATE_HAS_UPDATED;\n                this.firstUpdated(changedProperties);\n            }\n            this.updated(changedProperties);\n        }\n    }\n    _markUpdated() {\n        this._changedProperties = new Map();\n        this._updateState = this._updateState & ~STATE_UPDATE_REQUESTED;\n    }\n    /**\n     * Returns a Promise that resolves when the element has completed updating.\n     * The Promise value is a boolean that is `true` if the element completed the\n     * update without triggering another update. The Promise result is `false` if\n     * a property was set inside `updated()`. If the Promise is rejected, an\n     * exception was thrown during the update. This getter can be implemented to\n     * await additional state. For example, it is sometimes useful to await a\n     * rendered element before fulfilling this Promise. To do this, first await\n     * `super.updateComplete` then any subsequent state.\n     *\n     * @returns {Promise} The Promise returns a boolean that indicates if the\n     * update resolved without triggering another update.\n     */\n    get updateComplete() {\n        return this._updatePromise;\n    }\n    /**\n     * Controls whether or not `update` should be called when the element requests\n     * an update. By default, this method always returns `true`, but this can be\n     * customized to control when to update.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    shouldUpdate(_changedProperties) {\n        return true;\n    }\n    /**\n     * Updates the element. This method reflects property values to attributes.\n     * It can be overridden to render and keep updated element DOM.\n     * Setting properties inside this method will *not* trigger\n     * another update.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    update(_changedProperties) {\n        if (this._reflectingProperties !== undefined &&\n            this._reflectingProperties.size > 0) {\n            // Use forEach so this works even if for/of loops are compiled to for\n            // loops expecting arrays\n            this._reflectingProperties.forEach((v, k) => this._propertyToAttribute(k, this[k], v));\n            this._reflectingProperties = undefined;\n        }\n    }\n    /**\n     * Invoked whenever the element is updated. Implement to perform\n     * post-updating tasks via DOM APIs, for example, focusing an element.\n     *\n     * Setting properties inside this method will trigger the element to update\n     * again after this update cycle completes.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    updated(_changedProperties) {\n    }\n    /**\n     * Invoked when the element is first updated. Implement to perform one time\n     * work on the element after update.\n     *\n     * Setting properties inside this method will trigger the element to update\n     * again after this update cycle completes.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    firstUpdated(_changedProperties) {\n    }\n}\n/**\n * Marks class as having finished creating properties.\n */\nUpdatingElement.finalized = true;\n//# sourceMappingURL=updating-element.js.map","/**\n@license\nCopyright (c) 2019 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nexport const supportsAdoptingStyleSheets = ('adoptedStyleSheets' in Document.prototype) &&\n    ('replace' in CSSStyleSheet.prototype);\nconst constructionToken = Symbol();\nexport class CSSResult {\n    constructor(cssText, safeToken) {\n        if (safeToken !== constructionToken) {\n            throw new Error('CSSResult is not constructable. Use `unsafeCSS` or `css` instead.');\n        }\n        this.cssText = cssText;\n    }\n    // Note, this is a getter so that it's lazy. In practice, this means\n    // stylesheets are not created until the first element instance is made.\n    get styleSheet() {\n        if (this._styleSheet === undefined) {\n            // Note, if `adoptedStyleSheets` is supported then we assume CSSStyleSheet\n            // is constructable.\n            if (supportsAdoptingStyleSheets) {\n                this._styleSheet = new CSSStyleSheet();\n                this._styleSheet.replaceSync(this.cssText);\n            }\n            else {\n                this._styleSheet = null;\n            }\n        }\n        return this._styleSheet;\n    }\n    toString() {\n        return this.cssText;\n    }\n}\n/**\n * Wrap a value for interpolation in a css tagged template literal.\n *\n * This is unsafe because untrusted CSS text can be used to phone home\n * or exfiltrate data to an attacker controlled site. Take care to only use\n * this with trusted input.\n */\nexport const unsafeCSS = (value) => {\n    return new CSSResult(String(value), constructionToken);\n};\nconst textFromCSSResult = (value) => {\n    if (value instanceof CSSResult) {\n        return value.cssText;\n    }\n    else if (typeof value === 'number') {\n        return value;\n    }\n    else {\n        throw new Error(`Value passed to 'css' function must be a 'css' function result: ${value}. Use 'unsafeCSS' to pass non-literal values, but\n            take care to ensure page security.`);\n    }\n};\n/**\n * Template tag which which can be used with LitElement's `style` property to\n * set element styles. For security reasons, only literal string values may be\n * used. To incorporate non-literal values `unsafeCSS` may be used inside a\n * template string part.\n */\nexport const css = (strings, ...values) => {\n    const cssText = values.reduce((acc, v, idx) => acc + textFromCSSResult(v) + strings[idx + 1], strings[0]);\n    return new CSSResult(cssText, constructionToken);\n};\n//# sourceMappingURL=css-tag.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { TemplateResult } from 'lit-html';\nimport { render } from 'lit-html/lib/shady-render.js';\nimport { UpdatingElement } from './lib/updating-element.js';\nexport * from './lib/updating-element.js';\nexport * from './lib/decorators.js';\nexport { html, svg, TemplateResult, SVGTemplateResult } from 'lit-html/lit-html.js';\nimport { supportsAdoptingStyleSheets } from './lib/css-tag.js';\nexport * from './lib/css-tag.js';\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for LitElement usage.\n// TODO(justinfagnani): inject version number at build time\n(window['litElementVersions'] || (window['litElementVersions'] = []))\n    .push('2.2.0');\n/**\n * Minimal implementation of Array.prototype.flat\n * @param arr the array to flatten\n * @param result the accumlated result\n */\nfunction arrayFlat(styles, result = []) {\n    for (let i = 0, length = styles.length; i < length; i++) {\n        const value = styles[i];\n        if (Array.isArray(value)) {\n            arrayFlat(value, result);\n        }\n        else {\n            result.push(value);\n        }\n    }\n    return result;\n}\n/** Deeply flattens styles array. Uses native flat if available. */\nconst flattenStyles = (styles) => styles.flat ? styles.flat(Infinity) : arrayFlat(styles);\nexport class LitElement extends UpdatingElement {\n    /** @nocollapse */\n    static finalize() {\n        super.finalize();\n        // Prepare styling that is stamped at first render time. Styling\n        // is built from user provided `styles` or is inherited from the superclass.\n        this._styles =\n            this.hasOwnProperty(JSCompiler_renameProperty('styles', this)) ?\n                this._getUniqueStyles() :\n                this._styles || [];\n    }\n    /** @nocollapse */\n    static _getUniqueStyles() {\n        // Take care not to call `this.styles` multiple times since this generates\n        // new CSSResults each time.\n        // TODO(sorvell): Since we do not cache CSSResults by input, any\n        // shared styles will generate new stylesheet objects, which is wasteful.\n        // This should be addressed when a browser ships constructable\n        // stylesheets.\n        const userStyles = this.styles;\n        const styles = [];\n        if (Array.isArray(userStyles)) {\n            const flatStyles = flattenStyles(userStyles);\n            // As a performance optimization to avoid duplicated styling that can\n            // occur especially when composing via subclassing, de-duplicate styles\n            // preserving the last item in the list. The last item is kept to\n            // try to preserve cascade order with the assumption that it's most\n            // important that last added styles override previous styles.\n            const styleSet = flatStyles.reduceRight((set, s) => {\n                set.add(s);\n                // on IE set.add does not return the set.\n                return set;\n            }, new Set());\n            // Array.from does not work on Set in IE\n            styleSet.forEach((v) => styles.unshift(v));\n        }\n        else if (userStyles) {\n            styles.push(userStyles);\n        }\n        return styles;\n    }\n    /**\n     * Performs element initialization. By default this calls `createRenderRoot`\n     * to create the element `renderRoot` node and captures any pre-set values for\n     * registered properties.\n     */\n    initialize() {\n        super.initialize();\n        this.renderRoot =\n            this.createRenderRoot();\n        // Note, if renderRoot is not a shadowRoot, styles would/could apply to the\n        // element's getRootNode(). While this could be done, we're choosing not to\n        // support this now since it would require different logic around de-duping.\n        if (window.ShadowRoot && this.renderRoot instanceof window.ShadowRoot) {\n            this.adoptStyles();\n        }\n    }\n    /**\n     * Returns the node into which the element should render and by default\n     * creates and returns an open shadowRoot. Implement to customize where the\n     * element's DOM is rendered. For example, to render into the element's\n     * childNodes, return `this`.\n     * @returns {Element|DocumentFragment} Returns a node into which to render.\n     */\n    createRenderRoot() {\n        return this.attachShadow({ mode: 'open' });\n    }\n    /**\n     * Applies styling to the element shadowRoot using the `static get styles`\n     * property. Styling will apply using `shadowRoot.adoptedStyleSheets` where\n     * available and will fallback otherwise. When Shadow DOM is polyfilled,\n     * ShadyCSS scopes styles and adds them to the document. When Shadow DOM\n     * is available but `adoptedStyleSheets` is not, styles are appended to the\n     * end of the `shadowRoot` to [mimic spec\n     * behavior](https://wicg.github.io/construct-stylesheets/#using-constructed-stylesheets).\n     */\n    adoptStyles() {\n        const styles = this.constructor._styles;\n        if (styles.length === 0) {\n            return;\n        }\n        // There are three separate cases here based on Shadow DOM support.\n        // (1) shadowRoot polyfilled: use ShadyCSS\n        // (2) shadowRoot.adoptedStyleSheets available: use it.\n        // (3) shadowRoot.adoptedStyleSheets polyfilled: append styles after\n        // rendering\n        if (window.ShadyCSS !== undefined && !window.ShadyCSS.nativeShadow) {\n            window.ShadyCSS.ScopingShim.prepareAdoptedCssText(styles.map((s) => s.cssText), this.localName);\n        }\n        else if (supportsAdoptingStyleSheets) {\n            this.renderRoot.adoptedStyleSheets =\n                styles.map((s) => s.styleSheet);\n        }\n        else {\n            // This must be done after rendering so the actual style insertion is done\n            // in `update`.\n            this._needsShimAdoptedStyleSheets = true;\n        }\n    }\n    connectedCallback() {\n        super.connectedCallback();\n        // Note, first update/render handles styleElement so we only call this if\n        // connected after first update.\n        if (this.hasUpdated && window.ShadyCSS !== undefined) {\n            window.ShadyCSS.styleElement(this);\n        }\n    }\n    /**\n     * Updates the element. This method reflects property values to attributes\n     * and calls `render` to render DOM via lit-html. Setting properties inside\n     * this method will *not* trigger another update.\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    update(changedProperties) {\n        super.update(changedProperties);\n        const templateResult = this.render();\n        if (templateResult instanceof TemplateResult) {\n            this.constructor\n                .render(templateResult, this.renderRoot, { scopeName: this.localName, eventContext: this });\n        }\n        // When native Shadow DOM is used but adoptedStyles are not supported,\n        // insert styling after rendering to ensure adoptedStyles have highest\n        // priority.\n        if (this._needsShimAdoptedStyleSheets) {\n            this._needsShimAdoptedStyleSheets = false;\n            this.constructor._styles.forEach((s) => {\n                const style = document.createElement('style');\n                style.textContent = s.cssText;\n                this.renderRoot.appendChild(style);\n            });\n        }\n    }\n    /**\n     * Invoked on each update to perform rendering tasks. This method must return\n     * a lit-html TemplateResult. Setting properties inside this method will *not*\n     * trigger the element to update.\n     */\n    render() {\n    }\n}\n/**\n * Ensure this class is marked as `finalized` as an optimization ensuring\n * it will not needlessly try to `finalize`.\n */\nLitElement.finalized = true;\n/**\n * Render method used to render the lit-html TemplateResult to the element's\n * DOM.\n * @param {TemplateResult} Template to render.\n * @param {Element|DocumentFragment} Node into which to render.\n * @param {String} Element name.\n * @nocollapse\n */\nLitElement.render = render;\n//# sourceMappingURL=lit-element.js.map","var TAGS = {\n\t'' : ['<em>','</em>'],\n\t_ : ['<strong>','</strong>'],\n\t'\\n' : ['<br />'],\n\t' ' : ['<br />'],\n\t'-': ['<hr />']\n};\n\n/** Outdent a string based on the first indented line's leading whitespace\n *\t@private\n */\nfunction outdent(str) {\n\treturn str.replace(RegExp('^'+(str.match(/^(\\t| )+/) || '')[0], 'gm'), '');\n}\n\n/** Encode special attribute characters to HTML entities in a String.\n *\t@private\n */\nfunction encodeAttr(str) {\n\treturn (str+'').replace(/\"/g, '&quot;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\n}\n\n/** Parse Markdown into an HTML String. */\nfunction parse(md) {\n\tvar tokenizer = /((?:^|\\n+)(?:\\n---+|\\* \\*(?: \\*)+)\\n)|(?:^```(\\w*)\\n([\\s\\S]*?)\\n```$)|((?:(?:^|\\n+)(?:\\t|  {2,}).+)+\\n*)|((?:(?:^|\\n)([>*+-]|\\d+\\.)\\s+.*)+)|(?:\\!\\[([^\\]]*?)\\]\\(([^\\)]+?)\\))|(\\[)|(\\](?:\\(([^\\)]+?)\\))?)|(?:(?:^|\\n+)([^\\s].*)\\n(\\-{3,}|={3,})(?:\\n+|$))|(?:(?:^|\\n+)(#{1,3})\\s*(.+)(?:\\n+|$))|(?:`([^`].*?)`)|(  \\n\\n*|\\n{2,}|__|\\*\\*|[_*])/gm,\n\t\tcontext = [],\n\t\tout = '',\n\t\tlast = 0,\n\t\tlinks = {},\n\t\tchunk, prev, token, inner, t;\n\n\tfunction tag(token) {\n\t\tvar desc = TAGS[token.replace(/\\*/g,'_')[1] || ''],\n\t\t\tend = context[context.length-1]==token;\n\t\tif (!desc) { return token; }\n\t\tif (!desc[1]) { return desc[0]; }\n\t\tcontext[end?'pop':'push'](token);\n\t\treturn desc[end|0];\n\t}\n\n\tfunction flush() {\n\t\tvar str = '';\n\t\twhile (context.length) { str += tag(context[context.length-1]); }\n\t\treturn str;\n\t}\n\n\tmd = md.replace(/^\\[(.+?)\\]:\\s*(.+)$/gm, function (s, name, url) {\n\t\tlinks[name.toLowerCase()] = url;\n\t\treturn '';\n\t}).replace(/^\\n+|\\n+$/g, '');\n\n\twhile ( (token=tokenizer.exec(md)) ) {\n\t\tprev = md.substring(last, token.index);\n\t\tlast = tokenizer.lastIndex;\n\t\tchunk = token[0];\n\t\tif (prev.match(/[^\\\\](\\\\\\\\)*\\\\$/)) {\n\t\t\t// escaped\n\t\t}\n\t\t// Code/Indent blocks:\n\t\telse if (token[3] || token[4]) {\n\t\t\tchunk = '<pre class=\"code '+(token[4]?'poetry':token[2].toLowerCase())+'\">'+outdent(encodeAttr(token[3] || token[4]).replace(/^\\n+|\\n+$/g, ''))+'</pre>';\n\t\t}\n\t\t// > Quotes, -* lists:\n\t\telse if (token[6]) {\n\t\t\tt = token[6];\n\t\t\tif (t.match(/\\./)) {\n\t\t\t\ttoken[5] = token[5].replace(/^\\d+/gm, '');\n\t\t\t}\n\t\t\tinner = parse(outdent(token[5].replace(/^\\s*[>*+.-]/gm, '')));\n\t\t\tif (t==='>') { t = 'blockquote'; }\n\t\t\telse {\n\t\t\t\tt = t.match(/\\./) ? 'ol' : 'ul';\n\t\t\t\tinner = inner.replace(/^(.*)(\\n|$)/gm, '<li>$1</li>');\n\t\t\t}\n\t\t\tchunk = '<'+t+'>' + inner + '</'+t+'>';\n\t\t}\n\t\t// Images:\n\t\telse if (token[8]) {\n\t\t\tchunk = \"<img src=\\\"\" + (encodeAttr(token[8])) + \"\\\" alt=\\\"\" + (encodeAttr(token[7])) + \"\\\">\";\n\t\t}\n\t\t// Links:\n\t\telse if (token[10]) {\n\t\t\tout = out.replace('<a>', (\"<a href=\\\"\" + (encodeAttr(token[11] || links[prev.toLowerCase()])) + \"\\\">\"));\n\t\t\tchunk = flush() + '</a>';\n\t\t}\n\t\telse if (token[9]) {\n\t\t\tchunk = '<a>';\n\t\t}\n\t\t// Headings:\n\t\telse if (token[12] || token[14]) {\n\t\t\tt = 'h' + (token[14] ? token[14].length : (token[13][0]==='='?1:2));\n\t\t\tchunk = '<'+t+'>' + parse(token[12] || token[15]) + '</'+t+'>';\n\t\t}\n\t\t// `code`:\n\t\telse if (token[16]) {\n\t\t\tchunk = '<code>'+encodeAttr(token[16])+'</code>';\n\t\t}\n\t\t// Inline formatting: *em*, **strong** & friends\n\t\telse if (token[17] || token[1]) {\n\t\t\tchunk = tag(token[17] || '--');\n\t\t}\n\t\tout += prev;\n\t\tout += chunk;\n\t}\n\n\treturn (out + md.substring(last) + flush()).trim();\n}\n\nexport default parse;\n//# sourceMappingURL=snarkdown.es.js.map\n","import { LitElement, html } from 'lit-element';\n\nimport { get } from './index.js';\n\n/**\n * Custom element to render literals\n */\nclass litI18n extends LitElement {\n  /* eslint-disable require-jsdoc */\n  static get properties() {\n    return {\n      raw: { type: Boolean },\n    };\n  }\n\n  constructor() {\n    super();\n    this.raw = false;\n  }\n\n  render() {\n    return html`<slot></slot>`;\n  }\n\n  connectedCallback() {\n    this.key = this.textContent;\n    document.addEventListener('LIT_I18N_UPDATED', this._handleUpdate.bind(this));\n    this._handleUpdate();\n  }\n\n  disconnectedCallback() {\n    document.removeEventListener('LIT_I18N_UPDATED', this._handleUpdate.bind(this));\n  }\n  /* eslint-disable require-jsdoc */\n\n  /**\n   * Handles literal updates when language is changed\n   */\n  _handleUpdate() {\n    if (this.raw) {\n      const span = document.createElement('span');\n      span.innerText = get(this.key, true);\n      this.shadowRoot.appendChild(span);\n    } else {\n      this.shadowRoot.innerHTML = get(this.key);\n    }\n  }\n}\n\ncustomElements.define('lit-i18n', litI18n);\n","/* eslint-disable no-console */\n\nimport snarkdown from 'snarkdown';\nimport './lit-i18n.js';\n\nexport let i18nConfig = {};\n\nexport const setup = ({ resolveMethod, language, fallbackLanguage } = {}) => {\n  if (!resolveMethod || typeof resolveMethod !== 'function') {\n    throw new Error('[lit-i18n] resolveMethod is required and must be a function');\n  }\n\n  if (!fallbackLanguage) {\n    console.warn('[lit-i18n] Warning: no fallback language specified (en-EN will be used)');\n  }\n\n  i18nConfig = {\n    ...i18nConfig,\n    resolveMethod,\n    fallbackLanguage: fallbackLanguage ? fallbackLanguage : 'en-EN',\n    language: language ? language : navigator.language || navigator.userLanguage,\n  };\n\n  update();\n};\n\nexport const update = (language = i18nConfig.language) => {\n  if (language && language !== i18nConfig.language) {\n    i18nConfig.language = language;\n  }\n\n  i18nConfig.resolveMethod(language)\n    .then((result) => {\n      i18nConfig.translationsCache = result;\n      document.dispatchEvent(new CustomEvent('LIT_I18N_UPDATED'));\n    })\n    .catch((error) => {\n      if (language !== i18nConfig.fallbackLanguage) {\n        update(i18nConfig.fallbackLanguage);\n        console.warn(`[lit-i18n] Error resolving locales for language '${language}'. Falling back to '${i18nConfig.fallbackLanguage}'. ${error}.`);\n      } else {\n        throw new Error(`[lit-i18n] Error resolving locales for fallback language '${language}'. ${error}.`);\n      }\n    });\n};\n\nexport const get = (key, raw = false) => {\n  if (!('translationsCache' in i18nConfig)) {\n    return '';\n  }\n\n  if (key in i18nConfig.translationsCache) {\n    const translation = i18nConfig.translationsCache[key];\n    return raw ? translation : snarkdown(translation);\n  } else {\n    console.error(`[lit-i18n] Key '${key}' not found.`);\n    return key;\n  }\n};\n\n/* eslint-enable no-console */\n","import { setup } from './translate';\nexport { get, update } from './translate';\n\nsetup({\n  resolveMethod: (lang) => (\n    fetch(`./assets/locales/${lang}.json`)\n      .then((response) => response.json())\n  ),\n  language: 'es-ES',\n  fallbackLanguage: 'es-ES',\n});\n","import { css } from 'lit-element';\n\nexport const SharedStyles = css`\n  :host {\n    display: block;\n    box-sizing: border-box;\n\n    --app-drawer-width: 256px;\n\n    --app-primary-color: #CC0033;\n    --app-secondary-color: #4A4A4A;\n    --app-dark-text-color: var(--app-secondary-color);\n    --app-light-text-color: white;\n    --app-section-even-color: #f7f7f7;\n    --app-section-odd-color: white;\n    --app-section-border: 1px solid lightgray;\n\n    --app-header-background-color: white;\n    --app-header-text-color: var(--app-dark-text-color);\n    --app-header-selected-color: var(--app-primary-color);\n\n    --app-drawer-background-color: var(--app-secondary-color);\n    --app-drawer-text-color: var(--app-light-text-color);\n    --app-drawer-selected-color: #78909C;\n\n    --app-ecosystem-background-color-primary: #B3002D;\n    --app-ecosystem-light-text-color-button: #54565A;\n\n    --app-frequent-questions-secondary-color: #484848;\n    --app-frequent-questions-border-color: #969696;\n    --app-frequent-questions-background-color: #F8F9F9;\n  }\n\n  section {\n    background: var(--app-background-color, #fff);\n    padding:0;\n    font-size: var(--app-paragraph-font-size-mobile, 16px);\n  }\n\n  section h1.title.section-header {\n    text-transform: uppercase;\n    font-size: var(--app-title-font-size-mobile, 18px);\n    white-space: nowrap;\n    margin: 0;\n    padding: 15px 18px;\n    box-sizing: border-box;\n  }\n\n  section h1.section-header::before {\n    content: \"/\";\n    color: var(--app-primary-color, #CC0033);\n    font-weight: var(--app-font-weight-extrabold, 900);\n  }\n\n  section > * {\n    margin-right: auto;\n    margin-left: auto;\n  }\n\n  h2 {\n    font-size: var(--app-subtitle-font-size, 24px);\n    text-align: center;\n    color: var(--app-dark-text-color);\n  }\n\n  h1 {\n    font-size: var(--app-subtitle-font-size, 24px);\n  }\n\n  .primary-button {\n    background: var(--app-button-primary-color, red);\n    border-radius: 6px;\n    padding: 8px;\n    border: none;\n    color: var(--app-light-text-color, white);\n    letter-spacing: 0;\n    text-align: center;\n    cursor: pointer;\n    font-family: inherit;\n    text-decoration: none;\n    box-shadow: 0px 2px 4px 0px rgba(0, 0, 0, .5);\n  }\n\n  .primary-button:active {\n    background-color: var(--app-primary-color, red);\n  }\n\n  .primary-button.big {\n    height: 48px;\n    width: 275px;\n    font-weight: var(--app-font-weight-bold, 700);\n    font-size: 16px;\n    text-decoration: none;\n    box-sizing: border-box;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    margin-top: 50px;\n  }\n\n  .toggle-bar {\n    text-align: initial;\n    width: 24px;\n    height: 2px;\n    background: #fff;\n    position: relative;\n    top: 10px;\n    margin: 0 auto;\n  }\n\n  .toggle-bar:before,\n  .toggle-bar:after {\n    width: 24px;\n    height: 2px;\n    background: #fff;\n    content: '';\n    position: absolute;\n  }\n\n  .toggle-bar:before {\n    top: -9px;\n  }\n\n  .toggle-bar:after {\n    top: 9px;\n  }\n          \n  .toggle-bar,\n  .toggle-bar:before,\n  .toggle-bar:after {\n    transition: all 0.35s;\n  }\n\n  h1:focus,\n  h2:focus,\n  h3:focus,\n  h4:focus,\n  h5:focus,\n  h6:focus,\n  section:focus,\n  p:focus,\n  div:focus\n  {\n    outline: none;\n  }\n\n  @media (min-width: 768px) {\n    h1 {\n      font-size: var(--app-title-font-size-desktop, 32px);\n    }\n\n    h2 {\n      font-size: 36px;\n    }\n\n    .primary-button:hover {\n      background-color: var(--app-primary-color, red);\n    }\n    \n    section h1.title.section-header {\n      font-size: var(--app-title-font-size-desktop, 32px);\n      padding: 26px 120px;\n    }\n  }\n`;\n"],"names":["directives","WeakMap","isDirective","o","has","isCEPolyfill","undefined","window","customElements","polyfillWrapFlushCallback","removeNodes","container","start","end","n","nextSibling","removeChild","noChange","nothing","marker","String","Math","random","slice","nodeMarker","markerRegex","RegExp","boundAttributeSuffix","Template","[object Object]","result","element","this","parts","nodesToRemove","stack","walker","document","createTreeWalker","content","lastPartIndex","index","partIndex","strings","values","length","node","nextNode","nodeType","hasAttributes","attributes","count","i","endsWith","name","stringForPart","lastAttributeNameRegex","exec","attributeLookupName","toLowerCase","attributeValue","getAttribute","removeAttribute","statics","split","push","type","tagName","currentNode","data","indexOf","parent","parentNode","lastIndex","insert","s","createMarker","match","createTextNode","insertBefore","previousSibling","pop","str","suffix","isTemplatePartActive","part","createComment","TemplateInstance","template","processor","options","__parts","setValue","commit","fragment","cloneNode","importNode","nodeIndex","nodeName","handleTextExpression","insertAfterNode","handleAttributeExpressions","adoptNode","upgrade","TemplateResult","l","html","isCommentBinding","commentOpen","lastIndexOf","attributeMatch","substr","createElement","innerHTML","getHTML","isPrimitive","value","isIterable","Array","isArray","Symbol","iterator","AttributeCommitter","dirty","_createPart","AttributePart","text","v","t","setAttribute","_getValue","committer","directive","NodePart","__pendingValue","startNode","appendChild","endNode","ref","__insert","__commitText","__commitTemplateResult","Node","__commitNode","__commitIterable","clear","templateFactory","update","instance","_clone","itemParts","itemPart","item","appendIntoPart","insertAfterPart","BooleanAttributePart","Error","PropertyCommitter","super","single","PropertyPart","eventOptionsSupported","capture","addEventListener","removeEventListener","_e","EventPart","eventName","eventContext","__boundHandleEvent","e","handleEvent","newListener","oldListener","shouldRemoveListener","once","passive","shouldAddListener","__options","getOptions","event","call","defaultTemplateProcessor","prefix","templateCache","templateCaches","get","stringsArray","keyString","Map","set","key","join","getTemplateElement","walkerNodeFilter","removeNodesFromTemplate","nextActiveIndexInTemplateParts","removeCount","nodesToRemoveInTemplate","currentRemovingNode","forEach","countNodes","startIndex","getTemplateCacheKey","scopeName","compatibleShadyCSSVersion","ShadyCSS","prepareTemplateDom","console","warn","shadyTemplateFactory","cacheKey","TEMPLATE_TYPES","shadyRenderSet","Set","prepareTemplateStyles","renderedDOM","add","styles","querySelectorAll","condensedStyle","style","textContent","templates","from","removeStylesFromLitTemplates","refNode","insertCount","walkerIndex","insertNodeIntoTemplate","firstChild","querySelector","nativeShadow","removes","JSCompiler_renameProperty","prop","_obj","defaultConverter","Boolean","Object","JSON","stringify","Number","parse","notEqual","old","defaultPropertyDeclaration","attribute","converter","reflect","hasChanged","microtaskPromise","Promise","resolve","STATE_HAS_UPDATED","STATE_UPDATE_REQUESTED","STATE_IS_REFLECTING_TO_ATTRIBUTE","STATE_IS_REFLECTING_TO_PROPERTY","STATE_HAS_CONNECTED","UpdatingElement","HTMLElement","_updateState","_instanceProperties","_updatePromise","_hasConnectedResolver","_changedProperties","_reflectingProperties","initialize","observedAttributes","finalize","_classProperties","p","attr","_attributeNameForProperty","_attributeToPropertyMap","hasOwnProperty","superProperties","getPrototypeOf","k","_ensureClassProperties","noAccessor","prototype","defineProperty","oldValue","_requestUpdate","configurable","enumerable","finalized","superCtor","props","properties","propKeys","getOwnPropertyNames","getOwnPropertySymbols","createProperty","fromAttribute","toAttribute","_saveInstanceProperties","constructor","_v","_attributeToProperty","ctor","attrValue","_propertyValueToAttribute","propName","_propertyValueFromAttribute","shouldRequestUpdate","_valueHasChanged","_hasRequestedUpdate","_enqueueUpdate","updateComplete","reject","previousUpdatePromise","res","rej","_hasConnected","performUpdate","hasUpdated","_applyInstanceProperties","shouldUpdate","changedProperties","_markUpdated","firstUpdated","updated","size","_propertyToAttribute","supportsAdoptingStyleSheets","Document","CSSStyleSheet","constructionToken","CSSResult","cssText","safeToken","styleSheet","_styleSheet","replaceSync","css","reduce","acc","idx","textFromCSSResult","flattenStyles","flat","Infinity","arrayFlat","LitElement","_styles","_getUniqueStyles","userStyles","reduceRight","unshift","renderRoot","createRenderRoot","ShadowRoot","adoptStyles","attachShadow","mode","adoptedStyleSheets","map","_needsShimAdoptedStyleSheets","ScopingShim","prepareAdoptedCssText","localName","connectedCallback","styleElement","templateResult","render","hasRendered","needsScoping","host","firstScopeRender","renderContainer","createDocumentFragment","assign","appendInto","litRender","delete","TAGS","_","\n"," ","-","outdent","replace","encodeAttr","define","raw","_handleUpdate","bind","span","innerText","shadowRoot","i18nConfig","language","resolveMethod","then","translationsCache","dispatchEvent","CustomEvent","catch","error","fallbackLanguage","translation","md","chunk","prev","token","inner","tokenizer","context","out","last","links","tag","desc","flush","url","substring","trim","snarkdown","navigator","userLanguage","setup","lang","fetch","response","json","SharedStyles"],"mappings":"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"}